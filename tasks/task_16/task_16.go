package task_16

// Реализовать быструю сортировку массива (quicksort) встроенными методами языка.

func Execute() {
	// Исходный массив
	arr := []int{3, 2, 6, 5, 1, 4}

	// Сортировка
	qsort(arr, 0, len(arr)-1)
}

// Метод быстрой сортировки массива arr, low и high - первый и последний индекс массива соответственно
func qsort(arr []int, low, high int) {
	// Условие для остановки сортировки подмассива
	if low < high {
		// Разделение массива на два, между которыми находится опорный элемент p
		p := partion(arr, low, high)

		// Сортировка левого подмассива
		qsort(arr, 0, p-1)

		// Сортировка правого подмассива
		qsort(arr, p+1, high)
	}
}

// Функция для перемещения элементов массива arr.
// В данной реализации опорным выбирается самый последний элемент массива arr.
// В результате перещений все элементы массива, которые меньше опорного, находятся слева от него,
// и все элементы, которые больше опорного, находятся справа от него.
// Возвращает новый индекс опорного элемента.
func partion(arr []int, low, high int) int {
	// Значение опорного элемента
	pivot := arr[high]

	// i-ый индекс
	i := low

	// Итерация по массиву arr по j-ому индексу
	for j := low; j < arr[high]; j++ {
		// Если j-ый элемент меньше опорного, то j-ый и i-ый элементы меняются местами. Инкрементация i
		if arr[j] < pivot {
			arr[i], arr[j] = arr[j], arr[i]
			i++
		}
	}

	// i-ый и опорный элемент меняются местами
	arr[i], arr[high] = arr[high], arr[i]

	// Возврат индекса опорного элемента
	return i
}
