package task_10

import (
	"fmt"
	"math"
)

// Дана последовательность температурных колебаний: -25.4, -27.0 13.0, 19.0, 15.5, 24.5, -21.0, 32.5.
// Объединить данные значения в группы с шагом в 10 градусов. Последовательность в подмножноствах не важна.
// Пример: -20:{-25.0, -27.0, -21.0}, 10:{13.0, 19.0, 15.5}, 20: {24.5}, etc.

// Следуя логике примера для ключа = -20, можно вывести след. правило:
// (1) Если ключ = x, то его группа в интервале от [x - 10, x) или (x - 10, x].
// Но пример для ключа = 10 противоречит этому.
// Поэтому делаю предположение, что пример частично некорректный и провожу группировку согласно (1)

// PS Интервал можно было бы сделать и [x, x + 10), но смысл от этого не меняется

func Execute() {
	// Массив (слайс) температур
	temps := []float64{-25.4, -27.0, 13.0, 19.0, 15.5, 24.5, -21.0, 32.5, 0, -5.2, 1.3}

	// Функция для группировки
	groups := groupValues(temps)

	// Вывод результатов группировки
	for key, value := range groups {
		fmt.Printf("%d: %v\n", key, value)
	}
}

// Функция для группировки значений values с шагом в 10 с ключами кратными 10
func groupValues(values []float64) map[int][]float64 {
	// Мапа для группировки, где ключ - это группа, а значение это слайс из значений,
	// которые принадлежат соответствующему интервалу группы
	groups := map[int][]float64{}

	// Итерация по значениям
	for _, value := range values {
		key := getIntervalGroup(value)

		// Если для группы еще не были добавлены значения, то ключ добавляется в мапу
		if groups[key] == nil {
			groups[key] = make([]float64, 0, 1)
		}

		// Добавление значения в мапу по ключу, соответствующему интервалу группы
		groups[key] = append(groups[key], value)
	}

	return groups
}

// Функция для определения к какой группе принадлежит значение
func getIntervalGroup(intervalValue float64) int {
	return int(math.Floor((intervalValue+10.0)/10.0)) * 10
}
